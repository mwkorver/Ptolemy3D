Please describe / complete

= Features =

TODO - Write a list of high level features. Probably it would be better to write from a user perspective.

 * Open source. '''TODO''' - Think moving to LGPL (GPL is inappropriate for a framework) 
 * Support for more than one elevation model.
 * Support for tiled layers.

= Specifications =

== Globe ==

Globe must be rendered as a sphere.

The globe can have one or more elevation/terrain models and one or more data layers.

=== TiledLayer ===

One clear kind of data layer is Tiled Layer. This allows to display the globe with LOD (level of details) and also to have multiple details version of layer data.[[BR]]
This is crucial for layer with a high amount of data such as imagery and elevation datas.

A tiled layer is a representation of a pyramid of tiles (see WantToBuildVirtualGlobe). The minimum number of levels in the pyramid is one, there is no limit on the number of levels.[[BR]]
A tile is simple a surface defined by a "square" area [lat1, lon1, lat2, lon2].[[BR]]

Every pyramid of TiledLayer can have a different format structure, a different file format or resides on different server (locally, http, s3, ...) so the "general" classes must offer the "base" to allow extend easily as possible.
Again, every tiled layer can have a different number of levels, tile size, etc. They must be completely independent from each other.

'''QUESTION''' - Does all the Tiled Layer uses the same level hierarchy, meaning same number of levels and same tiles area on each levels ?[[BR]]
'''TALK''' - AS: This must be flexible. I think similar to WWJ, you can create a "basic" TiledLayer that know how to read TMS tiles, then when instantiate the class we can pass arguments to the constructor like: number of levels, tile size, etc. This way we could have two TMS TilerLayers with different configuration.[[BR]]

'''QUESTION''' - Does each tiles must have the same dimension on a specified level ? If not, the pyramid description must be defined somewhere by listing all tiles on each levels and there respective size: how ?[[BR]]
'''TALK''' - JJ: Each tile must have the same dimension on a level. A level will be defined by a property: tile size.[[BR]]
'''TALK''' - AS: I think this question isn't very important fro Ptolemy, that is, we can implement a TMS Tiledlayer (which "knows" how to render a TMS pyramid) and let other implement different kind of pyramids with any other characteristics.[[BR]]
'''TALK''' - JJ: This would means on a specified level, tiles could have variable size ?! So we could have Implementation or which a level is not a regular grid ?

'''QUESTION''' - Does a tile should have the same size on longitude and latitude ?[[BR]]
'''TALK''' - JJ: Yes (smiley)[[BR]]
'''TALK''' - AS: Same as before. We need to define a general case, like WWJ, Yahoo or Bing tile system and implement it. Later anyone can implement a sublcass of TiledLayer extending it in some way (allowing to read tiles from any type and characteristics).[[BR]]

TiledLayer have many puposes, and we should define characteristics of each independently:[[BR]]
 * Define a structure: pyramid of tiles[[BR]]
 * Define a the association of a tile and the data: one tile one data (?), data should be a file (?) etc[[BR]]
 * Define the meaning of the data.

We must defined all characteristics that any TiledLayer must implement.

The meaning of the actual data define by the TIledLayer is too general and must be seen as those sub group (sub kind of TiledLayer):[[BR]]
 1) GlobeTiledLayer: define the globe geometry (render in one pass): elevation and globe image.[[BR]]
 2) GeneralTiledLayer: define additional information that are render in a separate (independant) pass over the globe (CityGML ...).[[BR]]
 3) '''TODO''' - JJ: Can we have other specific association ?[[BR]]

'''TALK'' - JJ: Here is a proposed class diagrams. I've find it more clear to make it in 3 small diagrams.

Pyramid descrption:
{{{
[TiledLayer|numLevels],
[Level|no field|int getGridNumRows(); int getGridNumLines(); DecimalDegree getTileWidth(); DecimalDegree getTileHeight(); Tile getTile(int row int line); Level getLevel()],
[Tile|final DecimalDegree width;final DecimalDegree height; final int row; final int line|Level getLevel()],
[TileArea|lon1;lon2;lat1;lat2],
[TileData|no field|URL getDataURL(); Tile getTile()],
[TileData]-[note: TileData on define a URL where is the data. It will be downloaded and cached locally (if needed) and decoded and stored in memory by an external service of the the tile pyramid{bg:cornsilk}]
[Tile]->1[TileData],
[Tile]->1[TileArea],
[TiledLayer]++->*[Level],
[Level]++->*[Tile]
}}}
[[Image(http://yuml.me/7f1f87e1)]][[BR]]

Class 'hierarchy':
{{{
[Scene]->*[GeneralTiledLayer],
[Scene]->1[Globe],
[Globe]->1[GlobeRenderer],
[Globe]->*[ElevationTiledLayer],
[Globe]->*[ImageTiledLayer]
}}}
[[Image(http://yuml.me/74372730)]][[BR]]

Class inherance:
{{{
[TiledLayer]^-[GeneralTiledLayer],
[TiledLayer]^-[GlobeTiledLayer],
[GlobeTiledLayer]^-[ImageTiledLayer],
[GlobeTiledLayer]^-[ElevationTiledLayer]
}}}
[[Image(http://yuml.me/21970bc0)]][[BR]]

=== GlobeTiledLayer ===

The purpose of a GlobeTiledLayer is to associate to the globe all data used to render the globe 'ground'.

The globe ground is rendered in one pass and uses elevation and image data. They should be know to be able to render to globe, as they both affect how the globe is tesselated.
We deduce that elevation and image are tighly coupled. They both share the same render and used on the same rendering pass.[[BR]]
For easy extension and to be able to share mutiple GlobeTiledLayer implementation, we must have a common renderer. For that, we must extract a general interface for ElevationTiledlayer and ImageTiledLayer.

'''TASK''' JJ: I think this diagram is at the wrong place, please move/modify/delete.
{{{
[TiledLayer]++1->[Tile|lat1;lon1;lat2;lon2]
[TiledLayer|tileWidth;tileHeight;numLevels]
[TiledLayer]^[ImageTiledLayer]
[TiledLayer]^[ElevationModel]
[Globe]++1-*[ElevationModel]
[Globe]++1-*[ImageTiledLayer]
}}}
[[Image(http://yuml.me/d58f8e5)]][[BR]]
'''TODO''' - AS: I'm not sure we can share TiledLayer betwen elev. model and TiledImageLayer. Maybe we will need to differentiate and make it different classes without sharing a superclass. Also maybe we will need to differentiate between "sections" (as some kind of tile specific for terrain) and "tile" for images which also are rendered over a "section".

=== GeneralTiledLayer ===

A GeneralTiledLayer define a general data that would rendered over the globe ground.

This tile will define it's own rendering code, and will be independent to any other information.

{{{
[GeneralTiledLayer|int renderPassID|void render()]
}}}
[[Image(http://yuml.me/4cb9c1f1)]][[BR]]

=== Elevation Layer ===

'''''I think Elevation Layer is complex. We could do a first "iteration" and implement it using only one ElevationLayer in a Globe and later extend it to allows more than one ElevationLayer for one Globe.'''''
'''TODO''' - JJ: I think it is the exact wrong path to follow. The first implementation as you see will be totally rewritten when we will iterate to define an ElevationLayer, and how many of them can interacts together.
In no way the renderer defines the description of an ElevationLayer, the renderer only uses it to display 3d information (in our case). That what the ElevationLayer contains which describe it (ie elevation data and tile pyramid).
There will be possible iteration, later when we've define a general ElevationLayer, that will possibly restrict a little bit the general'ness' for better performance purpose. There is no need to implement anything at this time, but if it will helps you understand some part of the renderer, feel free to implement anything you want :)

Elevation layer contains globe elevation. An elevation layer can contains any type of elevation data, including but not limiting to DEM and TIN.[[BR]]
See Data Format section to discuss on the elevation models and elevation format.

We need a special association between (or among) globe and elevation layer. The elevation layer defines the globe geometry to render.[[BR]]
This geometry will be use for proper visibility management (tile culling 'hide what we don't see'). Only visible tiles will be displayed and image will be rendered on them.

We must be able to use more than one elevation layer. What would be there relationship ?[[BR]]
'''QUESTION''' - Should they share the same pyramid of tiles ?[[BR]]
'''TALK''' - AS: The tiles used for one elevation models has no need to be with the same size than tiles used for other elevation model neither for any tiled (imagery) layers.[[BR]]
AS: This way we can have one elevation layer that covers the whole globe (with a low resolution) and over it one elevation layer only for a specific globe area with high resolution. Of course the big issue here is how to "merge/tessellate" both models.[[BR]]
'''TALK''' - JJ: The question was probably not enought specific, by 'same pyramid' it was NOT suggested that all will use same tile size. It was suggested that Data for a specific tile size will all be located in one level, so if we have data from different size there will be many levels.[[BR]]
JJ: So, if we got an implementation that defines a set of tiles with size S1,S4,S5 of format F1 and a second implementation of tile S2,S3,S6 of format F2 => this would define a pyramid with the 6 levels: S1(F1),S2(F2),S3(F2),S4(F1),S5(F1),... Did you see what I mean ?
JJ: And all of that comes with the second question to how handle when they both specify tiles on the same level (ie with same tile size). What would be the priority ?
JJ: I think we must finish to describe the Pyramid structure (which will define what is a level and how tile could possibly be defined on it) and then concentrate here. Those two question make some assumption not yet properly defined, like that a level is a grid of homogeneous tiles (ie each tile on a level has the same size).

'''QUESTION''' - Could they define different set of elevation information on a same level (so on a same tile) ? What elevation to choose (priority) if multiple elevation is defined on a same tile ? [[BR]]
'''TALK''' - JJ: My idea is that an elevation layer is associated to one level of the pyramid. To define multiple resolution, we define multiple elevation layer each on a different levels (ie with a different tile size).[[BR]]
JJ: Having more than one elevation layer on specific level wile be:  1) prohibited or 2) priorized (first with data will be used). [[BR]]

=== Image Layer ===

Imagery  layer contains image to apply on the terrain. An imagery layer can contains any type of image data, including but not limiting to JP2.[[BR]]
See Data Format section to discuss on the imagery format.

We must be able to overlap image that would be blended together on the terrain geometry. For example, to blend a road map over the areal view of the globe.[[BR]]
To avoid confusion with image layer, the term overlap level will be used in the following to refer to that property.[[BR]]
Imagery layer are defined for multiple purpose:[[BR]]
 * Define multiple overlap level of images (example above)
 * Define multiple version of the same image layer, but with different LOD.
An imagery layer will be associated to a pyramid level and an overlap level.

We need a special association between globe and imagery layer. Images are applied on the globe geometry, and may affect how the geometry is prepared due to hardware restrictions.[[BR]]
Hardware restrictions are: we can only use one texture per image overlap level and per batch. A batch is a geometric area which can fit to the full tile are or only a sub area. A tile with 4 images on the first overlap level should be split at least in 4 geometries and so rendered with at least 4 batches.[[BR]]

'''QUESTION''' - Should we limit the number of overlap levels ? [[BR]]
'''TALK''' - JJ: Yes, hardware has limited support for this (texture unit / multi-texturing). Nowadays, most hardware have at least support for 8 , but there is still some hardware with only 1 or 2 levels.[[BR]]

'''QUESTION''' - Most other questions to discuss are the same as elevation layer.[[BR]]
'''TALK''' - [[BR]]

=== Asynchroneous Download / Decode ===

(Next explanation is supposing a "normal" pyramid with regular sizes on all levels) TileLayer has numLevel, tileWidth and tileHeight. 
Supposing an ImageTileLayer that knows how to query a TMS source, the TileLayer must compute when some tile at some level must be rendered. If the "image" to render by the tile is in memory then it must be rendered, otherwise the TileLayer must delegate the task of download the image and create a texture to another class.
This delegated task must be executed asynchronously from the render thread. Once the download has finished then load the texture and create a Tile for the TiledLayers.

'''TALK''' - AS: Here is when a threaded (asynchronous) queue plays with us. The TiledLayer must create some "Task" and puts it in a TaskQueue, which runs the Tasks instances we queue on it.

{{{
[Tile]->1[TileData],
[Tile]creates-.->[DataLoaderTask],
[DataLoaderTask]creates-.->[TileData]
}}}
[[Image(http://yuml.me/48310ddd)]][[BR]]

=== Needs ===

'''TODO''' - Think on how coordinates are translated to lat/lot when user picks on screen. We need to take into account images are in some projection and we need to take take into account that when converts the picked point to lat/lot. So probably we will need something to translate from spehere to cartesion or similar.

=== Other ===

TODO''' - Define names for "concepts". We need to decide for elevation model or terrain model.

'''TODO''' - Need to talk more about this, but maybe we can differentiate (like WWJ) between "sections" and "tiles".[[BR]]
'''TALK'''- Please define a WWJ section and a WWJ tile. 

== Data Format ==

Data format (imagery and elevation) show be independent of the viewer architecture.
The format choosen, by default, are jp2 for imagery data and dem/tin for elevation data. But we want any other format pluggable.

What are the properties of an imagery data ?
TO COMPLETE: List properties
 * Tile name convention ( like WMTS, TMS, WMS-C etc)
 * Projection (EPSG value)
 * Format (jp2, jpip, jpg, png etc)
 * Extents 
 * Number of Layers
 * meta-data

What are the properties of an elevation data ?
TO COMPLETE: List properties
 * Tile name convention ( like WMTS, TMS, WMS-C etc)
 * Format (DEM, TIN, something else...)
 * Extents
 * Number of Layers
 * meta-data


== Data Storage ==

The imagery data could be stored in a variety of ways in the data server(s). We should not restrict the organization (file system) of the data.
So must design a proper interface to transform the globe representation in data request.

{{{
[DataFinder|URL getTileImagery(Tile);URL getTileElevation(Tile)],
[Elevation]-[note: Definition of an elevation],
[Imagery]-[note: Definition of an imagery]
}}}
[[Image(http://yuml.me/312c7619)]]

Does this representation respect 'Data format' ?
(probably not, tile may have more than one imagery and may be many image layer)

TO COMPLETE: Talk and validate

